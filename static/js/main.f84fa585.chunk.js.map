{"version":3,"sources":["components/Cell.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","x","y","size","className","style","top","left","width","height","Board","props","setRef","ref","handleClick","event","elementOffset","getElementOffset","offsetX","clientX","offsetY","clientY","cellSize","onClick","Math","floor","cols","rows","renderCell","cell","key","rect","this","getBoundingClientRect","doc","document","documentElement","window","pageXOffset","clientLeft","pageYOffset","clientTop","cells","map","React","Component","defaultProps","DIRS","App","state","isRunning","interval","startGame","setState","loop","stopGame","stopLoop","handleIntervalChange","target","value","handleRandom","board","row","col","random","makeCells","handleClear","initlizeBoard","times","reduce","acc","item","concat","neighbors","calculateNeighbors","_frameId","setTimeout","clearTimeout","dir","y1","x1","length","onChange","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f84fa585.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport './Cell.css'\n\nconst Cell = ({ x, y, size }) => (\n  <div\n    className=\"Cell\"\n    style={{\n      top: `${size * y + 1}px`,\n      left: `${size * x + 1}px`,\n      width: `${size - 1}px`,\n      height: `${size - 1}px`\n    }}\n  />\n)\n\nCell.propTypes = {\n  x: PropTypes.number,\n  y: PropTypes.number,\n  size: PropTypes.number\n}\n\nexport default Cell\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './Board.css'\n\nimport Cell from './Cell'\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.rows = props.height / props.cellSize\n    this.cols = props.width / props.cellSize\n  }\n\n  setRef = ref => (this.ref = ref)\n\n  getElementOffset() {\n    const rect = this.ref.getBoundingClientRect()\n    const doc = document.documentElement\n\n    return {\n      x: rect.left + window.pageXOffset - doc.clientLeft,\n      y: rect.top + window.pageYOffset - doc.clientTop\n    }\n  }\n\n  handleClick = event => {\n    const elementOffset = this.getElementOffset()\n    const offsetX = event.clientX - elementOffset.x\n    const offsetY = event.clientY - elementOffset.y\n\n    const { cellSize, onClick } = this.props\n    const x = Math.floor(offsetX / cellSize)\n    const y = Math.floor(offsetY / cellSize)\n\n    if (x >= 0 && x <= this.cols && y >= 0 && y <= this.rows) {\n      onClick({ x, y })\n    }\n  }\n\n  renderCell = cell => {\n    return (\n      <Cell\n        key={`${cell.x},${cell.y}`}\n        x={cell.x}\n        y={cell.y}\n        size={this.props.cellSize}\n      />\n    )\n  }\n\n  render() {\n    const { cells, width, height } = this.props\n    return (\n      <div\n        ref={this.setRef}\n        className=\"Board\"\n        style={{ width, height }}\n        onClick={this.handleClick}\n      >\n        {cells.map(this.renderCell)}\n      </div>\n    )\n  }\n}\n\nBoard.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  cells: PropTypes.array,\n  cellSize: PropTypes.number,\n  onClick: PropTypes.func\n}\n\nBoard.defaultProps = {\n  width: 800,\n  height: 600,\n  cells: [],\n  onClick: () => null\n}\n\nexport default Board\n","import React, { Component } from 'react'\nimport { times } from 'lodash'\nimport './App.css'\n\nimport Board from './components/Board'\n\nconst DIRS = [\n  [-1, -1],\n  [-1, 0],\n  [-1, 1],\n  [0, 1],\n  [1, 1],\n  [1, 0],\n  [1, -1],\n  [0, -1]\n]\n\nclass App extends Component {\n  state = {\n    isRunning: false,\n    interval: 100,\n    cells: [],\n    cellSize: 20,\n    width: 800,\n    height: 600\n  }\n\n  constructor(props) {\n    super(props)\n\n    this.rows = this.state.height / this.state.cellSize\n    this.cols = this.state.width / this.state.cellSize\n    this.board = this.initlizeBoard()\n  }\n\n  startGame = () => {\n    this.setState({ isRunning: true })\n    this.loop()\n  }\n\n  stopGame = () => {\n    this.setState({ isRunning: false })\n    this.stopLoop()\n  }\n\n  initlizeBoard() {\n    const { width, height, cellSize } = this.state\n    const rows = height / cellSize\n    const cols = width / cellSize\n    const board = times(rows, () => times(cols, () => false))\n    return board\n  }\n\n  makeCells() {\n    return this.board.reduce((acc, rows, y) => {\n      const cells = rows.reduce((acc, item, x) => {\n        return item ? acc.concat({ x, y }) : acc\n      }, [])\n      return acc.concat(cells)\n    }, [])\n  }\n\n  loop() {\n    const newBoard = this.initlizeBoard()\n\n    const board = newBoard.map((row, y) => {\n      return row.map((col, x) => {\n        const neighbors = this.calculateNeighbors(this.board, x, y)\n        if (this.board[y][x]) {\n          if (neighbors === 2 || neighbors === 3) {\n            return true\n          } else {\n            return false\n          }\n        } else {\n          if (!this.board[y][x] && neighbors === 3) {\n            return true\n          }\n          return col\n        }\n      })\n    })\n\n    this.board = board\n    this.setState({ cells: this.makeCells() })\n\n    this._frameId = window.setTimeout(() => {\n      this.loop()\n    }, this.state.interval)\n  }\n\n  stopLoop() {\n    if (this._frameId) {\n      window.clearTimeout(this._frameId)\n      this._frameId = null\n    }\n  }\n\n  calculateNeighbors(board, x, y) {\n    const neighbors = DIRS.reduce((acc, dir) => {\n      const y1 = y + dir[0]\n      const x1 = x + dir[1]\n      const hasNeighbors =\n        x1 >= 0 && x1 < this.cols && y1 >= 0 && y1 < this.rows && board[y1][x1]\n\n      if (hasNeighbors) {\n        return acc + 1\n      }\n      return acc\n    }, 0)\n\n    return neighbors\n  }\n\n  handleIntervalChange = event => {\n    this.setState({ interval: event.target.value })\n  }\n\n  handleRandom = () => {\n    const board = this.board.map((row, y) =>\n      row.map((col, x) => {\n        return Math.random() >= 0.5\n      })\n    )\n    this.board = board\n    this.setState({ cells: this.makeCells() })\n  }\n\n  handleClear = () => {\n    this.board = this.initlizeBoard()\n    this.setState({\n      cells: this.makeCells(),\n      isRunning: false\n    })\n    this.stopLoop()\n  }\n\n  handleClick = ({ x, y }) => {\n    this.board[y][x] = !this.board[y][x]\n\n    this.setState({ cells: this.makeCells() })\n  }\n\n  render() {\n    const { width, height, cells, cellSize, isRunning } = this.state\n    return (\n      <div className=\"App\">\n        <div>\n          Total cells: {cells.length}\n        </div>\n        <Board\n          width={width}\n          height={height}\n          cellSize={cellSize}\n          cells={cells}\n          onClick={this.handleClick}\n        />\n        <div className=\"controls\">\n          Update every{' '}\n          <input\n            value={this.state.interval}\n            onChange={this.handleIntervalChange}\n          />{' '}\n          ms\n          {isRunning ? (\n            <button className=\"button\" onClick={this.stopGame}>\n              Stop\n            </button>\n          ) : (\n            <button className=\"button\" onClick={this.startGame}>\n              Run\n            </button>\n          )}\n          <button className=\"button\" onClick={this.handleRandom}>\n            Random\n          </button>\n          <button className=\"button\" onClick={this.handleClear}>\n            Clear\n          </button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}